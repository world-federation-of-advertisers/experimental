// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "wfa/measurement/api/v2alpha/crypto.proto";
import "wfa/measurement/api/v2alpha/measurement_consumer.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "DataProviderProto";

// A provider of event (e.g. impression) data. For example, a publisher or panel
// provider.
message DataProvider {
  message Key {
    string data_provider_id = 1;
  }
  // Resource key.
  Key key = 1;

  // X.509 certificate in DER format which can be verified using the
  // `DataProvider`'s root certificate. Required.
  bytes certificate = 2;

  // Resource key of the `DataProviderCertificate` that matches `certificate`.
  // Output-only.
  DataProviderCertificate.Key data_provider_certificate = 3;

  // Encryption public key for this `DataProvider` in DER format, which can be
  // verified using `certificate`. Required.
  SignedData public_key = 4;

  // Display name of the data provider.
  string display_name = 5;
}

message DataProviderCertificate {
  message Key {
    // ID of the parent `DataProvider`.
    string data_provider_id = 1;
    // ID of this `DataProviderCertificate`.
    string data_provider_certificate_id = 2;
  }
  // Resource key.
  Key key = 1;

  // X.509 certificate in DER format which can be verified using the
  // `DataProvider`'s root certificate. Required. Immutable.
  bytes certificate = 2;
}

// Encryption public key for the `DataProvider`. Singleton resource.
message DataProviderPublicKey {
  // Resource key.
  DataProvider.Key key = 1;

  // Encryption public key for this `DataProvider`, which can be verified using
  // `data_provider_certificate`. Required.
  SignedData public_key = 2;

  // Resource key of the `DataProviderCertificate` that can be used to verify
  // `public_key`.
  DataProviderCertificate.Key data_provider_certificate = 3;
}

// A grouping of events defined by a DataProvider. For example, a single
// campaign or creative defined in a publisher's ad system.
message EventGroup {
  message Key {
    string data_provider_id = 1;
    string event_group_id = 2;
  }
  // Resource key.
  Key key = 1;

  // Resource key of the `MeasurementConsumer` associated with this
  // `EventGroup`.
  MeasurementConsumer.Key measurement_consumer = 2;

  // Display name.
  string display_name = 3;

  // ID referencing the `EventGroup` in an external system, provided by the data
  // provider.
  string event_group_reference_id = 4;
}

// Wrapper for a list of `DataProvider` resource keys.
message DataProviderList {
  repeated DataProvider.Key data_provider = 1;
}
