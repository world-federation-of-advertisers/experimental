// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.protocol;

import "wfa/common/el_gamal_key.proto";
import "wfa/common/noise_parameters.proto";

option java_package = "org.wfanet.measurement.protocol";
option java_multiple_files = true;

// Proto messages wrapping the input arguments or output results of the Liquid
// legion v1 (two round) MPC protocol encryption methods, which are to be called
// via JNI in the Mill. Note that these protos contain sensitive data, e.g.,
// private keys used in the ciphers. So they SHOULD NOT be written into any logs
// or leave the running process.

// The request to add noise registers to the sketch.
// Only 3-tuple (register_index, fingerprint, count) registers are supported.
message AddNoiseToSketchRequest {
  // The input sketch, which is a concatenation of a list of registers.
  // Each register contains a 3-tuple of (index, key, count), each of which is
  // a 66 bytes ElGamal ciphertext. In other words, the sketch size should be
  // divisible by 66*3.
  // The sketch is only needed so the noise can be interleaved and hidden in the
  // sktech. The registers in the sketch are unchanged, except for their orders.
  bytes sketch = 1;
  // Public key of the composite ElGamal cipher. Used to encrypt the added
  // noise.
  wfa.common.ElGamalPublicKey composite_el_gamal_public_key = 2;
  // The elliptical curve to work on.
  int64 curve_id = 3;
  // Maximum frequency to display. Every count value greater than this value
  // is decrypted as the maximum_frequency. Hiding counts above the
  // maximum_frequency impacts how much moise is needed to achieve differential
  // privacy.
  int32 maximum_frequency = 4;
  // The baseline of noise agreed by all workers.
  int32 noise_baseline = 5;
}

// Response of the AddNoiseToSketch method.
message AddNoiseToSketchResponse {
  // The output sketch, which contains shuffled input and noise registers.
  // Each register contains a 3-tuple of (index, key, count), each of which is
  // a 66 bytes ElGamal ciphertext. In other words, the sketch size should be
  // divisible by 66*3.
  bytes sketch = 1;
  // The CPU time of processing the request.
  int64 elapsed_cpu_time_millis = 2;
}

// The request to blind (one layer) all register indexes of a sketch.
// Only 3-tuple (register_index, fingerprint, count) registers are supported.
message BlindOneLayerRegisterIndexRequest {
  // The input sketch, which is a concatenation of a list of registers.
  // Each register contains a 3-tuple of (index, key, count), each of which is
  // a 66 bytes ElGamal ciphertext. In other words, the sketch size should be
  // divisible by 66*3.
  bytes sketch = 1;
  // Key pair of the local ElGamal cipher. Required.
  wfa.common.ElGamalKeyPair local_el_gamal_key_pair = 2;
  // Public Key of the composite ElGamal cipher. Used to re-randomize the keys
  // and counts.
  wfa.common.ElGamalPublicKey composite_el_gamal_public_key = 3;
  // The elliptical curve to work on.
  int64 curve_id = 4;
}

// Response of the BlindOneLayerRegisterIndex method.
message BlindOneLayerRegisterIndexResponse {
  // The output sketch, whose register indexes are partially decrypted.
  // Each register contains a 3-tuple of (index, key, count), each of which is
  // a 66 bytes ElGamal ciphertext. In other words, the sketch size should be
  // divisible by 66*3.
  bytes sketch = 1;
  // The CPU time of processing the request.
  int64 elapsed_cpu_time_millis = 2;
}

// The request to blind (last layer) the register indexes, and then join the
// registers by the deterministically encrypted register indexes, and then
// merge the counts using the same-key-aggregating algorithm.
message BlindLastLayerIndexThenJoinRegistersRequest {
  // The input sketch, which is a concatenation of a list of registers.
  // Each register contains a 3-tuple of (index, key, count), each of which is
  // a 66 bytes ElGamal ciphertext. In other words, the sketch size should be
  // divisible by 66*3.
  // There should be only one layer of ElGamal encryption left
  // on the register indexes. In other words, this method should only be called
  // by the primary duchy at the last stop of round 1.
  bytes sketch = 1;
  // Key pair of the local ElGamal cipher. Required.
  wfa.common.ElGamalKeyPair local_el_gamal_key_pair = 2;
  // Public Key of the composite ElGamal cipher. Used to encrypt the random
  // numbers in SameKeyAggregation.
  wfa.common.ElGamalPublicKey composite_el_gamal_public_key = 3;
  // The elliptical curve to work on.
  int64 curve_id = 4;
}

// The response of the BlindLastLayerIndexThenJoinRegisters method.
message BlindLastLayerIndexThenJoinRegistersResponse {
  // A concatenation of a list of (flag, count) pairs in bytes.
  // Each flag or count is a 66 bytes ElGamal ciphertext, and the size of
  // flag_count_lists should be divisible by 132.
  bytes flag_counts = 1;
  // The CPU time of processing the request.
  int64 elapsed_cpu_time_millis = 2;
}

// The request to decrypt one layer of ElGamal encryption on the flag and count
// of all registers.
message DecryptOneLayerFlagAndCountRequest {
  // A concatenation of a list of (flag, count) pairs in bytes.
  // Each flag or count is a 66 bytes ElGamal ciphertext, and the size of
  // flag_count_lists should be divisible by 132.
  bytes flag_counts = 1;
  // The key pair used to create the local ElGamal cipher. required.
  wfa.common.ElGamalKeyPair local_el_gamal_key_pair = 2;
  // The elliptical curve to work on.
  int64 curve_id = 3;
}

// The response of the DecryptCountAndFlag method.
message DecryptOneLayerFlagAndCountResponse {
  // A concatenation of a list of (flag, count) pairs in bytes.
  // Each flag or count is a 66 bytes ElGamal ciphertext, and the size of
  // flag_count_lists should be divisible by 132.
  bytes flag_counts = 1;
  // The CPU time of processing the request.
  int64 elapsed_cpu_time_millis = 2;
}

// The request to decrypt the last layer of ElGamal encryption on the flag and
// count of all registers. Only called by the primary duchy as the last step of
// round 2.
message DecryptLastLayerFlagAndCountRequest {
  // A concatenation of a list of (flag, count) pairs in bytes.
  // Each flag or count is a 66 bytes ElGamal ciphertext, which only has one
  // layer of ElGamal encryption left.
  // The size of flag_count_lists should be divisible by 132.
  bytes flag_counts = 1;
  // The keys used to create the local ElGamal cipher. required.
  wfa.common.ElGamalKeyPair local_el_gamal_key_pair = 2;
  // Maximum frequency to display. Every count value greater than this value
  // is decrypted as the maximum_frequency.
  int32 maximum_frequency = 3;
  // The elliptical curve to work on.
  int64 curve_id = 4;
}

// The response of the DecryptCountAndFlag method.
message DecryptLastLayerFlagAndCountResponse {
  message FlagCount {
    // Decrypted is_not_destroyed flag. False indicates there are key conflict
    // at this register. True means all keys of this register are the same.
    bool is_not_destroyed = 1;
    // Decrypted count value, Caped by the maximum_frequency.
    int32 frequency = 2;
  }
  // (flag, count) result for each register index.
  repeated FlagCount flag_counts = 1;
  // The CPU time of processing the request.
  int64 elapsed_cpu_time_millis = 2;
}
